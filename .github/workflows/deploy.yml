name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Java 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3️⃣ Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4️⃣ 빌드 JAR
      - name: Build JAR
        run: ./gradlew clean build -x test

      # 5️⃣ SSH 키 준비
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.EC2_KEY_SERVER2 }}' > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      # 6️⃣ .env 파일 생성
      - name: Create .env file
        run: |
          echo '${{ secrets.ENV_FILE_CONTENT }}' > .env

      # 7️⃣ 프로젝트 파일들을 EC2로 배포
      - name: Deploy files to EC2
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "mkdir -p /home/ubuntu/nginx-app"
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no build/libs/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no Dockerfile ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/

      # 8️⃣ Docker Compose로 재배포
      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "
            cd /home/ubuntu/nginx-app
          
            # 기존 컨테이너 중지
            docker compose down
          
            # 이미지 빌드
            docker build -t nginx-app .
          
            # 컨테이너 실행
            docker compose up -d
          
            # 헬스 체크
            echo 'Waiting for application to start...'
            sleep 25
          
            # 컨테이너 상태 확인
            if docker ps --filter 'name=kjmate-backend' --filter 'status=running' | grep -q kjmate-backend; then
              echo '=== Deployment successful! ==='
              docker ps --filter 'name=kjmate'
              echo 'Checking health endpoint...'
              curl -f http://localhost:8080/actuator/health || echo 'Health check will be available shortly'
            else
              echo '=== Deployment failed! ==='
              docker ps -a --filter 'name=kjmate'
              echo '=== Container logs ==='
              docker logs kjmate-backend --tail 200
              exit 1
            fi
          "

      # 9️⃣ 정리
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/ec2_key.pem
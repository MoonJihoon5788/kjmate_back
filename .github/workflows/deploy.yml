name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃 (생략)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Java 21 설정 (생략)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3️⃣ Gradle 권한 설정 (생략)
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4️⃣ 빌드 JAR (생략)
      - name: Build JAR
        run: ./gradlew clean build -x test

      # 5️⃣ SSH 키 준비 (생략)
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.EC2_KEY_SERVER2 }}' > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true


      # 5.5️⃣ .env 파일을 Secret에서 생성 (✨수정된 스텝✨)
      # tee 명령어를 사용하여 내용 앞뒤에 불필요한 공백/따옴표가 들어가는 것을 방지합니다.
      - name: Create .env file
        run: |
          cat <<EOF > .env
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
      

      # 6️⃣ 프로젝트 파일들을 EC2로 배포 (생략)
      - name: Deploy files to EC2
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "mkdir -p /home/ubuntu/nginx-app"
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no build/libs/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no Dockerfile ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/
          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/nginx-app/

      # 7️⃣ Docker Compose로 재배포 (✨수정된 스텝✨)
      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "
            cd /home/ubuntu/nginx-app
          
            # 💡 디버깅: EC2 서버에 복사된 .env 파일 내용 확인
            echo '--- DEBUG: Displaying .env content on EC2 ---'
            cat .env
            echo '--- END DEBUG ---'
          
            # 기존 컨테이너 중지
            docker compose down
          
            # 이미지 빌드
            docker build -t nginx-app .
          
            # 컨테이너 실행
            docker compose up -d
          
            # 헬스 체크
            echo 'Waiting for application to start...'
            sleep 15
          
            if docker ps | grep -q 'kjmate-backend.*Up'; then
              echo 'Deployment successful! Application is running.'
              docker ps
            else
              echo 'Deployment failed! Container is not running.'
              docker logs kjmate-backend
              exit 1
            fi
          "

      # 8️⃣ 정리 (생략)
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/ec2_key.pem